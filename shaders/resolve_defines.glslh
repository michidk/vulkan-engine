#include "common.glslh"

#define DEFAULT_VERTEX_SHADER \
    const vec3 g_Vertices[6] = vec3[6](                         \
        vec3(-1.0, -1.0, 0.0),                                  \
        vec3(1.0, 1.0, 0.0),                                    \
        vec3(-1.0, 1.0, 0.0),                                   \
                                                                \
        vec3(-1.0, -1.0, 0.0),                                  \
        vec3(1.0, -1.0, 0.0),                                   \
        vec3(1.0, 1.0, 0.0)                                     \
    );                                                          \
                                                                \
    const vec2 g_UVs[6] = vec2[6](                              \
        vec2(-1.0, -1.0),                                       \
        vec2(1.0, 1.0),                                         \
        vec2(-1.0, 1.0),                                        \
                                                                \
        vec2(-1.0, -1.0),                                       \
        vec2(1.0, -1.0),                                        \
        vec2(1.0, 1.0)                                          \
    );                                                          \
                                                                \
    VERTEX_OUT {                                                \
        vec2 uv;                                                \
    } v2f;                                                      \
                                                                \
    void main() {                                               \
        gl_Position = vec4(g_Vertices[gl_VertexIndex], 1.0);    \
        v2f.uv = g_UVs[gl_VertexIndex];                         \
    }

#define IN_GPASS0 layout (input_attachment_index = 0, set = 0, binding = 1) uniform subpassInput
#define IN_GPASS1 layout (input_attachment_index = 1, set = 0, binding = 2) uniform subpassInput
#define IN_DEPTH layout (input_attachment_index = 2, set = 0, binding = 3) uniform subpassInput

#define OUT_COLOR layout (location = 0) out vec4

#define CALC_WORLD_POS(uv, depth, invProj, invView) \
    vec3 worldPos;                                  \
    {                                               \
        vec4 clipPos = vec4((uv).xy, (depth), 1.0); \
        vec4 viewPos = invProj * clipPos;           \
        viewPos /= viewPos.w;                       \
        worldPos = (invView * viewPos).xyz;         \
    }

#define UNIFORM_POINTLIGHT \
    layout (push_constant) uniform LightData {  \
        vec4 lightPosition;                     \
        vec4 luminousFlux;                      \
    }

#define UNIFORM_DIRLIGHT \
    layout (push_constant) uniform LightData {  \
        vec4 directionToLight;                     \
        vec4 irradiance;                      \
    }
